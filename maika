# Clear workspace ---------------------------------------------------------
rm(list = ls())

# Load libraries ----------------------------------------------------------
library("tidyverse")
library("broom")  
library("cowplot")
library("correlationfunnel")

# Define functions --------------------------------------------------------
source(file = "R/99_project_functions.R")

# Load data ---------------------------------------------------------------
my_data_clean_aug <- read_tsv(file = "data/03_my_data_clean_aug.tsv")


# Wrangle data ------------------------------------------------------------
#my_data_clean_aug %>% ...

#In general, when performing PCA, we’ll want to do (at least) three things:
#Look at the data in PC coordinates.
#Look at the rotation matrix.
#Look at the variance explained by each PC.


# when wide, cannot easily plot in raw format - hard to see trends in data
# PCA allows to see overall shape of data
# PC are underlying structure in data, directions where there is the most variance
#directions where data is most spread out. 
#try to find the straight line that best spreads the data out when it is projected along it.
#This is the first principal component, the straight line that shows the most substantial variance in the data

# Look at data in PC coordinates ------------------------------------------
#my_data_clean_aug
#na.omit(my_data_clean_aug)
# Remove non-numeric columns, scale to unit variance
pca_fit <- my_data_clean_aug %>% 
  select(where(is.numeric)) %>% 
  prcomp(scale = TRUE, center = TRUE) #same as doing (x-mean)/sd#what do args mean?
#left with 13 cols 
# also delete na?
pca_fit <- na.omit(pca_fit)

summary(pca_fit)
# PC1 explains 41% of total variance
#two-fifths of the information in the dataset (13 variables) can be encapsulated by just that one Principal Component

str(pca_fit)# center point, scailing, std of each PC
# x is value of each sample in terms of the pcs

#PC1 is approximately 𝑥 and accounts for almost all the variance, but has no discriminatory power, whereas PC2 is 𝑦 and discriminates perfectly between the classes.
#Principal component analysis (PCA) is label (classification) indifferent. All it does is to transform some high dimensional data to another dimensional space. It might help in classification attempts by, for example, creating data set that is easier separable by a particular method. However, this is only a by-product (or a side effect) of PCA.
#When we do Principal Component analysis the principal components correspond to the directions of maximum variability, they do not guarantee maximum discrimination or separation between classes.

#So the 2nd component gives you good classification means data in that direction gives you better discrimination between classes. When you perform Linear Discriminant Analysis(LDA) it gives you the best orthogonal direction components that maximize the inter-class distance and minimize the intra-class distance.

#So if you do LDA on the data instead of PCA probably one of the very first components would be closer to PC6 than to PC1. Hope this helps.
library(devtools)
install_github("vqv/ggbiplot")

library(ggbiplot)

ggbiplot(pca_fit)
#axes are seen as arrows originating from the center point
# TS contributes to PC1, moving samples to right, vfa prot movint to lefte, negatively contribute?
ggbiplot(pca_fit, labels=my_data_clean_aug$Taxa)
# see which are similar - have many of the same - hva clustered befoore?

#LAV JITTERPLOT FOR AT SE HVOR MANGE DER ER OVENI HINANDEN
# VÄR SIKKER PÅ HVAD DER SKER OG HVORFOR. VED HVAD VI SNAKKER OM OG HVORDAN MAN KAN TOLKE DET

ggbiplot(pca_fit,ellipse=TRUE,  labels=my_data_clean_aug$Taxa, groups=my_data_clean_aug$site)
ggbiplot(pca_fit,ellipse=TRUE, groups=my_data_clean_aug$site)
# viet bacteria form distinct cluster top right.
# viet bacteria charactarized by high values for ts
# tanza by high temp? or only along pc1?
#separation between tanz and viet cars along a principal component that is closely correlated to temp, depth? pc2, disp, wt, and mpg. This provides us with some clues for future analyses; if we were to try to build a classification model to identify the origin of a car, these variables might be useful.
ggbiplot(pca_fit,ellipse=TRUE, obs.scale = 1, var.scale = 1, groups=my_data_clean_aug$site)

# Plot data in PC coordinates
pca_fit %>%
  augment(my_data_clean_aug) %>% # combine with original data to color by site
  ggplot(aes(.fittedPC1, .fittedPC2, color = site)) + 
  geom_point(size = 1.5) +
  scale_color_manual(
    values = c(Tanzania = "#D55E00", Vietnam = "#0072B2")
  ) +
  theme_half_open(12) + background_grid()
# What does this tell us?

#does it make sense to look at values in pca_fit?
pca_fit

# Rotation matrix
# rotation is relationsip (correlation) between initial variables and the principal components
pca_fit %>%
  tidy(matrix = "rotation")
#what does this mean?

# define arrow style for plotting
arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)

# plot rotation matrix
pca_fit %>%
  tidy(matrix = "rotation") %>%
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") %>%
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) +
  geom_text(
    aes(label = column),
    hjust = 1, nudge_x = -0.02, 
    color = "#904C2F"
  ) +
  xlim(-1.25, .5) + ylim(-.5, 1) +
  coord_fixed() + # fix aspect ratio to 1:1
  theme_minimal_grid(12)
#what does this tell us?
# missing values - delete first?


# Look at variance explained by each PC -----------------------------------

pca_fit %>%
  tidy(matrix = "eigenvalues")
# Need 9 components to explain 95% of variance

pca_fit %>%
  tidy(matrix = "eigenvalues") %>%
  ggplot(aes(PC, percent)) +
  geom_col(fill = "#56B4E9", alpha = 0.8) +
  scale_x_continuous(breaks = 1:9) +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))
  ) +
  theme_minimal_hgrid(12)
# the first component captures 41% of variation in data, does not separate tanzania from vietnam
# the secind one does though?

# Visualise data ----------------------------------------------------------
#my_data_clean_aug %>% ...

# Write data --------------------------------------------------------------
#write_tsv(...)
#ggsave(...)